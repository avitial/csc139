import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.Scanner;

import javax.swing.JFileChooser;

public class simpleVM {

public static void main(String[] args) throws IOException {
ArrayList<Integer> ref = new ArrayList<Integer>();//creating new HashSet

try {
   Scanner inFile = new Scanner(userInputFile()); //open file  
   while(inFile.hasNext()) {
    String frame = inFile.next();
    int frm = Integer.parseInt(frame);
    ref.add(frm);// add the integers to HashSet.
   }//end of while
  
   inFile.close();//close the file
  
} catch (FileNotFoundException e) {
   System.err.println("FileNotFoundException: " + e.getMessage());
}

//display the size if it the set is not empty
if(!ref.isEmpty()){
   int size = ref.size();
   System.out.println("The reference string lenght is: " + size);
}
//printing the read reference string using an iterator
Iterator<Integer> iter = ref.iterator();
while (iter.hasNext())
   System.out.print(iter.next() +" ");

//converting the arraylist to an array
Integer frame[] = new Integer[ref.size()];
   frame = ref.toArray(frame);
   System.out.printf("\nPage Replacement Policies:?\n");
   System.out.printf("\n1 :   FIFO\n2:   LRU\n\n");
   System.out.printf("\nEnter a number between 1 and 2 to choose one of the page replacement policies:");

   Scanner sc = new Scanner(System.in);
   while (!sc.hasNextInt()) {
   sc.next(); // discard next token, which isn't a valid int
   }
   int ch = sc.nextInt();

switch(ch){
   case 1: FIFO(frame,ref.size());
   break;
   case 2: LRU(frame,ref.size());
   break;
   default: System.out.printf("\nInvlaid Choice");
   }
  
}
/**Simulates LRU page replacement for given reference string
* @throws IOException **/
public static void LRU(Integer[] page, int n) throws IOException {
int [] frame = new int[10];
int []used = new int[10];
int index = 0;
int i,j,k,temp;
int flag=0,pf=0;
BufferedWriter wr = new BufferedWriter(new FileWriter("file.txt"));
PrintWriter out = new PrintWriter(wr);
System.out.printf("\tLRU Page Replacement");
System.out.printf("\nEnter number of Frames: ");
Scanner sc = new Scanner(System.in);
   while (!sc.hasNextInt()) {
   sc.next(); // discard next token, which isn't a valid int
   }
   int nf = sc.nextInt();
for(i=0;i<nf;i++)
   frame[i]= -1;

for(i=0;i<n;i++){
   flag=0;
   for(j=0;j<nf;j++){
    if(frame[j]==page[i]){//no fault
     System.out.printf("\n%d: ", page[i]);
     out.printf("\n%d: ", page[i]);
     flag=1;
     break;
    }
   }
   if(flag==0){//fault occurs
    for(j=0;j<nf;j++)
     used[j]=0;//all unused initially
    //moving through pages and searching recently used pages
    try{
     for(j = 0,temp= i-1;j < nf-1;j++,temp--){
      for(k = 0;k < nf;k++){
       if(frame[k]==page[temp])
        used[k]=1;
        //mark the recently used pages
      }
     }
    }
    catch(ArrayIndexOutOfBoundsException e){
    }
    for(j=0;j<nf;j++)
     if(used[j]==0)
      index=j;
    //replace the LRU page with new page
    frame[index]=page[i];
    System.out.printf("\n%d: ", page[i]);
    System.out.printf("--->F ");
    out.printf("\n%d: ", page[i]);
    out.printf("--->F ");
    pf++;//no of page faults
   }

   for(k= nf-1;k>=0;k--)
    if(frame[k] != -1){
     System.out.printf(" %d",frame[k]);//print frames
     out.printf(" %d",frame[k]);
    }
}

System.out.printf("\nNumber of page faults is: %d ",pf);
out.printf("\nNumber of page faults is: %d ",pf);
out.close();
wr.close();
}

/**Simulates FIFO page replacement for given reference string
* @throws IOException **/
public static void FIFO(Integer[] pages, int pg) throws IOException {
int [] frame = new int[25];
int i,k,avail,count=0;
BufferedWriter wr = new BufferedWriter(new FileWriter("file.txt"));
PrintWriter out = new PrintWriter(wr);
System.out.printf("\tFIFO Page Replacement");
System.out.printf("\nEnter number of Frames: ");
Scanner sc = new Scanner(System.in);
   while (!sc.hasNextInt()) {
   sc.next(); // discard next token, which isn't a valid int
   }
   int nof = sc.nextInt();
for(i=0;i<nof;i++)
frame[i]= -1;

int j=0;
System.out.printf("\n");
out.printf("\n");
for(i=0;i<pg;i++){
   System.out.printf("%d\t",pages[i]);
   out.printf("%d\t",pages[i]);
avail=0;
for(k=0;k<nof;k++)
if(frame[k]==pages[i])
   avail=1;

if (avail==0){
    frame[j]=pages[i];
   j=(j+1) % nof;
   count++;

   for(k=0;k<nof;k++)
    if(frame[k]!=-1){
    System.out.printf("%d",frame[k]);
    out.printf("%d",frame[k]);
    }
  
   System.out.printf("-->F");
   out.printf("-->F");
   }

   if(avail==1){
for(k=0;k<nof;k++)
if(frame[k]!=-1){
   System.out.printf("%d",frame[k]);
   out.printf("%d",frame[k]);
}
   }
   System.out.printf("\n");
   out.printf("\n");
}
System.out.printf("\nNo of Faults: %d\n",count);
out.printf("\nNo of Faults: %d\n",count);
out.close();
wr.close();
}
/**
* Lets the user select an input file using a standard file
* selection dialog box. If the user cancels the dialog
* without selecting a file, the return value is null.
*/
static File userInputFile() {
JFileChooser fileDialog = new JFileChooser();
fileDialog.setDialogTitle("Please select the input file:");
int option = fileDialog.showOpenDialog(null);
if (option != JFileChooser.APPROVE_OPTION)
   return null;
else
   return fileDialog.getSelectedFile();
}//end of choosing file

}
